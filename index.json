[{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/tags/cyberdefenders/","section":"Tags","summary":"","title":"Cyberdefenders","type":"tags"},{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/tags/hard/","section":"Tags","summary":"","title":"Hard","type":"tags"},{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/","section":"Jaybird1291","summary":"","title":"Jaybird1291","type":"page"},{"content":" Scénario # Un employé informatique d’InfiniTech Solutions a signalé une activité inhabituelle associée à son compte e-mail. Lors de l’investigation, il a été découvert que les identifiants professionnels de l’employé avaient été divulgués lors d’une récente fuite de données.\nL’employé avait utilisé son adresse mail professionnelle pour s’inscrire sur une plateforme tierce, ce qui a exposé ses identifiants. Des acteurs malveillants ont exploité ces identifiants pour se connecter au compte mail de l’employé et envoyer des e-mails de phishing à d’autres employés de l’organisation.\nVotre tâche est d’enquêter sur cet incident en analysant les logs, en déterminant l’étendue de l’attaque, en identifiant si des utilisateurs ont interagi avec les mails de phishing, et en découvrant l’impact de la campagne de phishing sur le réseau.\nSetup # Pour ce scénario d\u0026rsquo;investigation, nous allons principalement utiliser Splunk Search pour analyser les logs. En complément, nous utiliserons d’autres outils tels que xml.onlineviewer, Cyberchef ainsi que VirusTotal.\nRappels # Splunk est une plateforme d’analyse qui permet de collecter, indexer et rechercher des données générées par des systèmes, applications et équipements réseau. Il récupère ses logs via divers mécanismes tels que des agents installés sur les endpoints, l’ingestion de fichiers de logs ou encore des API.\nUne fois collectées, les données sont indexées, ce qui permet de les organiser et de faciliter la recherche. Splunk utilise le langage de recherche SPL (Search Processing Language) pour interroger ces données.\nInitial Access # Question 1 # Quel compte de messagerie a été compromis et utilisé pour lancer l\u0026rsquo;attaque ?\nPremièrement, vérifions les \u0026ldquo;sourcetype\u0026rdquo; disponibles sur notre\nindex=\u0026#34;main\u0026#34; | stats count by sourcetype Les sourcetypes dans Splunk sont des étiquettes qui indiquent le type de données ou l\u0026rsquo;origine des événements collectés.\nPour répondre à cette question, on va se focus sur les \u0026ldquo;syslog\u0026rdquo; premièrement. En effet, les syslog regroupent les logs générés par divers équipements et contiennent généralement des informations détaillées sur les activités système et de sécurité.\nPour aller plus vite et éviter de s\u0026rsquo;inonder d\u0026rsquo;informations, on va chercher avec un regex pour uniquement afficher les adresses mails :\n* sourcetype=syslog | regex _raw=\u0026#34;[\\w\\.-]+@[\\w\\.-]+\\.\\w+\u0026#34; On voit beaucoup de logs, pour nous faciliter la tâche, on va compter combien de fois chaque adresse mail apparaît et afficher les résultats sous forme de tableau :\n* sourcetype=syslog | rex field=_raw \u0026#34;(?\u0026lt;email\u0026gt;[\\w\\.-]+@[\\w\\.-]+\\.\\w+)\u0026#34; | stats count by email | sort -count | head 10 | rename count AS \u0026#34;Number of occurrences\u0026#34;, email AS \u0026#34;Email address\u0026#34; On peut même visualiser ça sous forme de graphique :\nRéponse : twhite@infinitechsolutions.xyz\nQuestion 2 # Après avoir identifié le compte compromis, l\u0026rsquo;attaquant a envoyé des mails de phishing à d\u0026rsquo;autres employés de l\u0026rsquo;entreprise. Quels sont les noms de ces employés, classés par ordre chronologique et séparés par des virgules ?\nLe formatage de log d\u0026rsquo;envoi de mail est comme cela :\nUser [email_expéditeur] [adresse_IP]; Message [ID_message] for [email_destinataire] Pour la recherche on va donc faire :\n* sourcetype=syslog \u0026#34;User twhite@infinitechsolutions.xyz\u0026#34; | rex field=_raw \u0026#34;Message \u0026lt;[^\u0026gt;]+\u0026gt; for (?\u0026lt;recipient\u0026gt;[\\w\\.-]+@[\\w\\.-]+\\.\\w+)\u0026#34; | table _time recipient | sort _time | stats list(recipient) as recipients | eval recipients=mvjoin(recipients, \u0026#34;, \u0026#34;) Cette requête nous permet d\u0026rsquo;identifier et lister chronologiquement les destinataires en question.\nEn effet, on y sélectionne le user du compte compromis et on utilise un regex pour extraire et stocker dans une variable l\u0026rsquo;adresse mail du destinataire.\nEnsuite, on trie les résultats par ordre chronologique et on format le résultat pour que ça soit bien lisible.\nRéponse : rnichols,llopez,gbaker,ahall\nQuestion 3 # Quel est le nom de la pièce jointe malveillante envoyée depuis le compte compromis ?\nCette question m\u0026rsquo;a posé plus de problème que ce que à quoi je m\u0026rsquo;attendais. En effet, premièrement j\u0026rsquo;ai cherché :\n* sourcetype=syslog \u0026#34;User twhite@infinitechsolutions.xyz\u0026#34; | regex _raw=\u0026#34;for (rnichols|llopez|gbaker|ahall)@infinitechsolutions\\.xyz\u0026#34; Néanmoins aucune trace de pièce jointe. Je me suis donc dit \u0026ldquo;mhmm je ne dois pas être sur le bon sourcetype, je vais rechercher les autres.\u0026rdquo;\nJ\u0026rsquo;ai donc recherché :\nindex=* \u0026#34;twhite@infinitechsolutions.xyz\u0026#34; | stats count by sourcetype Uniquement syslog, je suis donc sur le bon sourcetype. Je continue donc à réfléchir et je me dis \u0026ldquo;je vais bypass le problème de formatage et simplement chercher des extensions de fichier\u0026rdquo;\nJe demande donc à ChatGPT de me faire une liste d\u0026rsquo;extension et je me retrouve avec cette requête :\nindex=* sourcetype=syslog twhite@infinitechsolutions.xyz | rex field=_raw \u0026#34;attachment=(?\u0026lt;malicious_attachment\u0026gt;[\\w\\.-]+\\.(exe|zip|pdf|docx|xlsm|js|vbs|scr|bat))\u0026#34; | table _time malicious_attachment | sort _time Toujours rien, pas de pièce jointe.\nÉtant toujours bloqué, j\u0026rsquo;ai décidé de réfléchir différemment. Le titre du lab est \u0026ldquo;Midnight RDP\u0026rdquo;, ce qui me fait penser à l\u0026rsquo;APT nommée \u0026ldquo;Midnight Blizzard\u0026rdquo;.\nDans mes recherches, je suis tombé sur un article intitulé \u0026ldquo;How Midnight Blizzard Uses Malicious .RDP Files to Exploit Windows Systems: A Technical Guide\u0026rdquo; (Yua Mikanana).\nBon, au vu du nom du lab, c\u0026rsquo;est évident. Je cherche donc \u0026ldquo;.RDP\u0026rdquo; et j\u0026rsquo;obtiens le fichier :\nRéponse : cloud zerotrust compliance.rdp\nExecution # Question 1 # Après avoir analysé les interactions des utilisateurs, quel employé a téléchargé et exécuté la pièce jointe malveillante ?\nOn change de sourcetype, on passe sur les WinEventLog.\nLes WinEventLog correspondent aux journaux d\u0026rsquo;événements de Windows, qui enregistrent diverses activités du système (comme les erreurs, les avertissements, les informations de sécurité ou les activités applicatives) pour permettre un suivi et une analyse des événements sur un système Windows.\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; cloud zerotrust compliance.rdp On voit donc bien le username de l\u0026rsquo;utilisateur qui a téléchargé ce fichier : C:\\Users\\rnichols\\Downloads\\cloud zerotrust compliance.rdp\nRéponse : rnichols\nQuestion 2 # Sur la machine DC, une balise DLL a été exécutée par l\u0026rsquo;attaquant en mémoire. Quels sont les 10 premiers octets du hachage SHA-256 de ce fichier DLL malveillant ?\nPremièrement, listons les DLL ayant un lien avec PowerShell sur le DC :\nindex=* sourcetype=xmlwineventlog \u0026#34;Powershell\u0026#34; | search host=\u0026#34;DC01\u0026#34; | rex field=_raw \u0026#34;(?\u0026lt;file\u0026gt;\\b\\w{6,8}\\.\\w{3}\\b)\u0026#34; | search file=\u0026#34;*dll\u0026#34; On remarque que le script complet est trop long pour être enregistré en un seul événement. Il est donc découpé en segments. On peut le voir grâce au MessageNumber :\nLes deux événements partagent le même ActivityID {0B39225B-3C43-0001-5078-390B433CDB01} ainsi que d’autres identifiants, ce qui montre qu’ils appartiennent à la même exécution de script.\nLe premier segment (MessageNumber = 1) contient le début du script, incluant la configuration de l’environnement PowerShell et la définition de fonctions telles que func_get_proc_address et func_get_delegate_type.\nLe dernier segment (MessageNumber = 33) contient la fin du script, notamment la partie qui effectue le décodage d’une chaîne Base64 (XORée avec la clé 35) et qui alloue de la mémoire pour exécuter le code décodé.\nEnsemble, ces segments reconstituent l’intégralité d’un payload qui cherche vraisemblablement à injecter et exécuter du code en mémoire.\nLe script, une fois reconstitué, décode un payload obfusqué (d’abord en Base64, puis XORé avec 35) et utilise des fonctions Windows natives (comme VirtualAlloc via GetProcAddress et GetDelegateForFunctionPointer) pour allouer de la mémoire et exécuter le code malveillant.\n[...] $var [...] -bxor 35 [...] On peut le reconstituer via une recherche Splunk :\nindex=* sourcetype=xmlwineventlog EventID=4104 0B39225B-3C43-0001-5078-390B433CDB01 | stats values(ScriptBlockText) as Script by SystemTime | table Script On peut ensuite désencoder le script via Cyberchef :\nOn retrouve notre DLL en question :\nEnfin, on extrait le fichier et on récupère son hash :\nRéponse : 0ee6bc20a7f855d881cce962de09c77960ea5c85ca013e3d123fce61109ff8c5\nPersistence # Question 1 # Après l\u0026rsquo;établissement de la connexion malveillante, un fichier a été déposé sur le système. Quel est le nom de ce fichier déposé ?\nOn sait que le fichier .rdp a été exécuté vers 20:45:27 (cf. question 1 de la partie Execution).\nOn va donc chercher à partir de ce moment-là.\nPremièrement, j\u0026rsquo;ai tenté de rechercher dans Splunk des téléchargements via des commandes PowerShell (Invoke-WebRequest, curl, etc.), mais ça n\u0026rsquo;a rien donné.\nJ\u0026rsquo;ai donc modifié ma recherche :\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time Alors pourquoi cela fonctionne ?\nVoici le détail de l’événement :\nLe champ TerminalSessionId=3 suggère fortement que l\u0026rsquo;utilisateur était connecté via une session RDP, car :\nLa session 0 est souvent utilisée par SYSTEM. Les sessions interactives locales commencent généralement à 1. Les sessions RDP prennent souvent des ID plus élevés (2, 3, etc.). explorer.exe est le processus principal de l’interface graphique Windows et agit comme un lanceur pour les programmes démarrés par un utilisateur interactif.\nScénarios possibles expliquant ce comportement :\nSession interactive (RDP ou non) : Si rnichols s\u0026rsquo;est connecté via RDP, explorer.exe s’est lancé en tant que shell utilisateur et a exécuté les programmes définis dans Startup (ztssvc.exe). Cette situation se produit même sans RDP si l’utilisateur se connecte physiquement ou via un service comme runas. Exécution automatique au démarrage de l\u0026rsquo;utilisateur : ztssvc.exe étant dans Startup, il est exécuté dès que l\u0026rsquo;utilisateur se connecte (que ce soit en local ou via RDP). Injection ou Persistance via explorer.exe : Si un attaquant a persisté un malware via Startup, explorer.exe va automatiquement exécuter ce binaire dès qu\u0026rsquo;un utilisateur se connecte. Exploit ou Exécution forcée par un attaquant : Si explorer.exe a été compromis (via injection DLL ou autre technique), il aurait pu être utilisé pour exécuter ztssvc.exe. Réponse : ztssvc.exe\nQuestion 2 # Pour conserver un accès à long terme, l\u0026rsquo;attaquant a créé une tâche planifiée sur la machine compromise. Quel est le nom de cette tâche ?\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; EventCode=4698 OR EventCode=4702 | search user=\u0026#34;rnichols\u0026#34; | table _time EventCode TaskName Command User | rename EventCode as \u0026#34;Event ID\u0026#34;, TaskName as \u0026#34;Scheduled Task\u0026#34;, Command as \u0026#34;Executed Command\u0026#34; | sort _time Question 3 # Dans le cadre de sa stratégie de persistance, l\u0026rsquo;attaquant a créé un nouveau compte utilisateur. Quel est le nom de ce compte non autorisé ?\nToujours avec la même requête que pour la question 1 :\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time On peut y trouver une commande PowerShell encodée qui paraît très suspecte :\nOn prend cette commande et on la décode via Cyberchef :\nRéponse : Administrator\nQuestion 4 # Pour faciliter l\u0026rsquo;accès à distance, l\u0026rsquo;attaquant a modifié les paramètres du bureau à distance. Quel est le nom de la clé de registre qui détermine si les connexions RDP (Remote Desktop Protocol) sont autorisées ?\nAyant déjà investigué et administré pas mal de Windows, je connaissais déjà la réponse. Néanmoins, voici comment la trouver :\nOn recherche toujours les commandes PowerShell avec -EncodedCommand, car l\u0026rsquo;attaquant en a exécuté plusieurs :\nOn y trouve cette commande :\nRéponse : fDenyTSConnections\nQuestion 5 # Des recherches supplémentaires ont révélé la création d\u0026rsquo;un nouveau compte d\u0026rsquo;utilisateur sur le DC. Quel est le nom de ce compte ?\nOn peut supposer que cela a été fait de la même manière que sur l\u0026rsquo;autre host. On recherche donc :\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; host=\u0026#34;DC01\u0026#34; \u0026#34;-EncodedCommand\u0026#34; Réponse : rniclos\nPrivilege Escalation # Question 1 # En examinant la technique d\u0026rsquo;escalade de privilège, quels sont les 6 derniers octets du CLSID de l\u0026rsquo;interface COM privilégiée que l\u0026rsquo;attaquant a exploitée ?\nLe CLSID est un identifiant unique global (GUID) utilisé par Windows COM (Component Object Model) pour identifier des objets COM dans le registre.\nLes attaquants utilisent des CLSID de COM Interfaces privilégiées pour exécuter du code avec des privilèges élevés :\nIls exploitent des COM Objects mal configurés pour escalader leurs privilèges. Un attaquant peut créer, manipuler ou appeler une interface COM privilégiée* via regsvr32.exe, powershell, mshta.exe ou rundll32.exe. Ici, on sait que le malware est ztssvc.exe. On va donc rechercher tout EventCode \u0026ldquo;1\u0026rdquo; (création de processus) lié à l\u0026rsquo;exécution de ztssvc.exe et filtrer uniquement sur les IntegrityLevel \u0026ldquo;High\u0026rdquo; :\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; EventCode=1 | search Image=\u0026#34;*ztssvc.exe*\u0026#34; | search IntegrityLevel=\u0026#34;High\u0026#34; | table _time User CommandLine IntegrityLevel ParentCommandLine | sort _time Réponse : 7CE93B6DC937\nQuestion 2 # Pour élever ses privilèges, l\u0026rsquo;attaquant a déposé un autre fichier sur le système. Quel est le nom de ce fichier ?\nOn refait la même commande et on vérifie tout ce qui s\u0026rsquo;est passé après le téléchargement du premier fichier (ztssvc.exe) :\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | search NOT ParentCommandLine=\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time Réponse : Akagi64.exe\nDefense Evasion # Question 1 # L\u0026rsquo;attaquant a cherché à modifier le comportement du système pour affaiblir les paramètres de sécurité. Quel est le nom de la clé de registre qui régit les paramètres de l\u0026rsquo;invite du Contrôle de compte d\u0026rsquo;utilisateur (UAC) pour les utilisateurs administratifs ?\nOn trouve la réponse dans les commandes PowerShell encodées déjà observées :\nRéponse : ConsentPromptBehaviorAdmin\nQuestion 2 # Pour éviter d\u0026rsquo;être détecté, l\u0026rsquo;attaquant a déplacé la balise dans un répertoire protégé du système. Quel est le nom de ce fichier malveillant déplacé ?\nS’il y a eu déplacement, il devrait y avoir un événement de création ou de renommage de fichier (Event ID 11 ou 2).\nindex=* sourcetype=xmlwineventlog EventCode=11 OR EventCode=2 \u0026#34;rnichols\u0026#34; | search TargetFilename=\u0026#34;C:\\\\Windows\\\\System32\\\\*\u0026#34; OR TargetFilename=\u0026#34;C:\\\\Windows\\\\SysWOW64\\\\*\u0026#34; OR TargetFilename=\u0026#34;C:\\\\ProgramData\\\\*\u0026#34; | table _time User TargetFilename ProcessName | sort _time Réponse : Amazon ZeroTrust Compl.exe\nDiscovery # Question 1 # En déterminant la première action de l\u0026rsquo;attaquant sur la machine compromise, quelle a été la première commande exécutée pour recueillir des informations sur le système ?\nSachant que la machine a été compromise à 20:45:27 (cf. question 1 de la partie Execution), on va chercher à partir de ce moment-là :\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | search NOT ParentCommandLine=\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time Réponse : whoami /groups\nLateral Movement # Question 1 # Quel outil l\u0026rsquo;attaquant a-t-il utilisé pour se déplacer latéralement vers le DC ?\nEncore une fois, on va devoir investiguer les commandes PowerShell encodées, cette fois-ci celles émises par Amazon ZeroTrust Compl.exe.\npowershell -nop -exec bypass -EncodedCommand UwBlAHQALQBJAHQAZQBtACAAVwBTAE0AYQBuADoAXABsAG8AYwBhAGwAaABvAHMAdABcAEMAbABpAGUAbgB0AFwAVAByAHUAcwB0AGUAZABIAG8AcwB0AHMAIAAtAFYAYQBsAHUAZQAgACIARABDADAAMQAuAGEAZAAuAGkAbgBmAGkAbgBpAHQAZQBjAGgAcwBvAGwAdQB0AGkAbwBuAHMALgB4AHkAegAiACAALQBGAG8AcgBjAGUA Cette commande modifie les paramètres de Windows Remote Management (WinRM) sur IT01 pour faire confiance à DC01.ad.infinitechsolutions.xyz pour les connexions distantes. C’est un bon indicateur de mouvement latéral via PowerShell Remoting (WinRM).\nRéponse : WinRM\nCommand \u0026amp; Control # Question 1 # En remontant le fil des activités de l\u0026rsquo;attaquant, quelle était l\u0026rsquo;adresse IP à partir de laquelle les courriels malveillants ont été envoyés ?\nOn revient aux toutes premières questions en cherchant le user qui a envoyé le phishing :\nindex=* sourcetype=syslog \u0026#34;User twhite@infinitechsolutions.xyz\u0026#34; Réponse : 3.78.253.99\nQuestion 2 # Puisque cloud zerotrust compliance.rdp a été exécuté sur IT01 et qu’on connaît l’adresse IP de l’expéditeur de mail, on peut tester directement :\nindex=* sourcetype=xmlwineventlog (EventCode=1 OR EventCode=3) | search host=\u0026#34;IT01\u0026#34; | search DestinationPort=3389 AND DestinationIp=3.78.253.99 | table _time User DestinationIp DestinationPort | sort _time Réponse : 3.78.253.99:3389\nQuestion 3 # L\u0026rsquo;analyse a révélé que le fichier déposé fonctionne comme une balise Cobalt Strike. Quel est le point de terminaison du serveur de commande et de contrôle (C\u0026amp;C) avec lequel cette balise communique ?\nPremièrement vérifions bien quel fichier est le Cobalt Strike beacon :\nEnsuite, on continue l\u0026rsquo;investigation en recherchant à quelle IP/port s’est connecté Amazon ZeroTrust Compl.exe :\nindex=* sourcetype=xmlwineventlog EventCode=3 | search Image=\u0026#34;*Amazon ZeroTrust Compl.exe*\u0026#34; | search NOT DestinationIp=\u0026#34;\u0026#34; | table _time User Image DestinationIp DestinationPort Protocol | sort _time (EventCode 3 correspond à une connexion réseau établie par un processus sur une machine Windows)\nRéponse : 3.78.244.11:8080\nQuestion 4 # En examinant la configuration de la DLL, quelle valeur est associée à la clé \u0026lsquo;C2Server\u0026rsquo; qui dirige la communication de la balise ?\nOn retourne sur VirusTotal et on retrouve cette information dans l\u0026rsquo;onglet \u0026ldquo;Behavior\u0026rdquo;.\nRéponse : 3.78.244.11,/dot.gif\nLab terminé !\n","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/posts/midnight-rdp/","section":"Posts","summary":"Scénario # Un employé informatique d’InfiniTech Solutions a signalé une activité inhabituelle associée à son compte e-mail.","title":"Midnight RDP Lab","type":"posts"},{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/tags/splunk/","section":"Tags","summary":"","title":"Splunk","type":"tags"},{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2 mars 2025","externalUrl":null,"permalink":"/blog-cyber/tags/threat-hunting/","section":"Tags","summary":"","title":"Threat Hunting","type":"tags"},{"content":"","date":"19 mai 2024","externalUrl":null,"permalink":"/blog-cyber/tags/android-forensic/","section":"Tags","summary":"","title":"Android Forensic","type":"tags"},{"content":"","date":"19 mai 2024","externalUrl":null,"permalink":"/blog-cyber/tags/autopsy/","section":"Tags","summary":"","title":"Autopsy","type":"tags"},{"content":"","date":"19 mai 2024","externalUrl":null,"permalink":"/blog-cyber/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":" Scénario # Nous avons réussi à confirmer la localisation de l\u0026rsquo;acteur malveillant qui a compromis le réseau WiFi de notre gouvernement.\nRécemment, un raid à l\u0026rsquo;aube dans le cadre de l\u0026rsquo;OP ERADICATE a été mené à une adresse dans la capitale vélorienne et une quantité considérable d\u0026rsquo;éléments de preuve a été saisie. On notera en particulier un appareil Android appartenant à l\u0026rsquo;agent, dont on pense qu\u0026rsquo;il se trouvait sur le lieu de l\u0026rsquo;attaque.\nNous avons besoin de votre expertise pour analyser cet appareil et répondre aux questions détaillées ci-dessous. Vous n\u0026rsquo;avez pas beaucoup de temps, une réunion du COBR vélorien a été organisée pour discuter de vos résultats\u0026hellip;\nFichiers # opshieldwall2.zip contenant \u0026ldquo;EVIDENCE-CASE-RAVENSKIAN-AGENT-002\u0026rdquo; où on le retrouve le dossier \u0026ldquo;data\u0026rdquo; et \u0026ldquo;storage\u0026rdquo; d\u0026rsquo;un Android Cela nous laisse pas mal de marge de manœuvre, en effet, le /data contient énormément d\u0026rsquo;informations telles que :\nCheatsheet SANS FOR585 Avant propos # Avant de commencer, voici quelques informations importantes sur Android :\nLes données utilisateur peuvent être stockées en interne et en externe sur Android. Les données internes sont enregistrées dans la mémoire flash NAND, une mémoire non volatile qui conserve les données même en cas de coupure d\u0026rsquo;alimentation. La NAND stocke le bootloader, le système d\u0026rsquo;exploitation et les données utilisateur. Les données des applications sont stockées sur la mémoire flash NAND ou sur la carte SD.\nAndroid est basé sur des variantes des branches LTS (long-term support) du Kernel Linux. Avec Android v8 (Oreo), Google a imposé l\u0026rsquo;utilisation de la version 4.4 ou supérieur du Kernel Linux. Par exemple Android v9 (Pie) fonctionne sur les versions 4.4, 4.9 ou 4.14 selon l\u0026rsquo;appareil. Plus d\u0026rsquo;info disponnible sur le wiki d\u0026rsquo;Android OS https://source.android.com/docs/core/architecture/kernel/android-common?hl=fr.\nandroid-mainline est la principale branche de développement des fonctionnalités Android. La ligne principale Linux est fusionnée avec android-mainline chaque fois que Linus Torvalds publie une version ou une version candidate :\nOn retrouve principalement ces systèmes de fichiers :\nEXT4 F2FS YAFFS2 exFAT La plupart des artefacts sont des DB SQLite et des fichiers XML. Android isole les applications au niveau du Kernel, leur attribuant un identifiant unique (UID) pour suivre les applications exécutées.\nAndroid Architecture # Le noyau Linux constitue la base d\u0026rsquo;Android, supportant des fonctionnalités cruciales telles que les threads et la gestion de la mémoire de bas niveau utilisées par Android Runtime (ART).\nLe HAL fournit des interfaces standardisées qui exposent les fonctionnalités matérielles aux API Java de niveau supérieur. Il est composé de modules de bibliothèque spécifiques à chaque composant matériel (comme la caméra ou le Bluetooth). Lorsqu\u0026rsquo;une API accède au matériel, Android charge le module de bibliothèque correspondant\nL\u0026rsquo;environnement d\u0026rsquo;exécution Android (Android Runtime dit ART) exécute chaque application dans son propre processus et instance. Gérant plusieurs machines virtuelles sur des appareils à faible mémoire grâce au bytecode DEX spécialement conçu et optimisé pour Android. Les outils de compilation comme d8 transforment le code Java en bytecode DEX pour l\u0026rsquo;exécution sur Android.\nDe nombreux composants et services système Android essentiels, tels qu\u0026rsquo;ART et HAL, sont créés à partir de code natif nécessitant des bibliothèques natives écrites en C et C++.\nLes fonctionnalités d\u0026rsquo;Android sont accessibles via des API Java, facilitant la réutilisation des principaux composants et services système modulaires comme les notifications, la gestion des ressources et la localisation.\nLes applications système sont l\u0026rsquo;ensemble des applications de base fournies avec Android.\nAndroid Virtual Machine # Les VM sont utilisés comme couches d\u0026rsquo;abstraction entre une application et l\u0026rsquo;appareil Android sous-jacent.\nChaque application fonctionne dans sa propre instance dans une VM, isolant les applications les unes des autres.\nLes applications Android sont écrites en Java mais sont compilées et compilées en bytecode Java.\nCe bytecode est ensuite transformé en bytecode Dalvik (fichiers .dex) ou bytecode ART.\nDalvik et ART exécutent le bytecode (.dex) dans une machine virtuelle, permettant aux applications de fonctionner indépendamment du matériel sous-jacent.\nAvant KitKat (v.4.4), Android utilisait des VM Dalvik.\nAvec Lollipop (v5.0), Android a commencé à utiliser Android Runtime (ART) et a cessé d\u0026rsquo;utiliser la VM Dalvik.\nLes deux environnements d\u0026rsquo;exécution Dalvik et ART fonctionnent avec le bytecode DEX, mais ART possède de nouvelles fonctionnalités d\u0026rsquo;optimisation.\nDirectory structure # /cache : peut contenir des pièces jointes gmail, des téléchargements, des données de navigation et des mises à jour OTA /efs : contient des fichiers nécessaires au fonctionnement de l\u0026rsquo;appareil en cas de défaillance /data : /data/data : contient les dossiers des applications (/data/data/com.example.app), les fichiers de configurations des apps, les DB SQLite des apps, leurs logs, cache etc. /app : contient des fichiers .apk du marché Android *Des malwares peuvent être trouvés ici /backup : stocke l\u0026rsquo;API de sauvegarde pour les développeurs donc les données de sauvegarde des utilisateurs ne sont pas stockées ici /media : l\u0026rsquo;emplacement de stockage interne équivalent à une carte SD. *Des malwares malveillants peuvent être trouvés ici /misc : les fichiers liés à Bluetooth, dhcp, vpn, Wi-Fi, etc. sont stockés ici /system : contient des fichiers clés tels que gesture.key et passwords.key ; le fichier accounts.db qui contient les usernames et les mots de passe pour l\u0026rsquo;authentification des fichiers etc. /property : contient les propriétés du système, y compris le fuseau horaire, les paramètres de langue, etc. /mnt : /asec : stocke les données non chiffrés des apps /DCIM : stocke les thumbnails des albums /Pictures : stocke les images de l\u0026rsquo;appareil photo /downloads : fichiers téléchargés localement /secure/asec : stocke les données chiffrés des apps /system : /app : contient des fichiers .apk. *Des malwares peuvent être trouvés ici /priv-app : contient des fichiers \u0026amp; apk avec des permissions au niveau du système. *Des malwares peuvent être trouvés ici Pour avoir plus d\u0026rsquo;informations sur\nles permissions des app : https://developer.android.com/guide/topics/permissions/overview?hl=fr ; https://blog.mindorks.com/what-are-the-different-protection-levels-in-android-permission/ la CLI d\u0026rsquo;Android : https://developer.android.com/tools/adb?hl=fr Setup # Au vu des fichiers et du scénario, je vais utiliser l\u0026rsquo;outil Autopsy. Cela peut prendre un peu de temps à ce setup, c\u0026rsquo;est pour cela que j\u0026rsquo;attaque cela ici.\nSi vous ne connaissez pas Autopsy, voici une briève description :\nAutopsy est un outil d\u0026rsquo;investigation numérique opensource. Il se rapporte à l\u0026rsquo;interface graphique du Sleuth Kit et d\u0026rsquo;autres outils de forensic. Il est utilisé pour analyser des disques durs et des smartphones dans le cadre d\u0026rsquo;enquêtes. Les fonctionnalités clés d\u0026rsquo;Autopsy incluent la récupération de fichiers supprimés, l\u0026rsquo;analyse des métadonnées, la recherche par mots-clés, la visualisation des timelines d\u0026rsquo;activités, et l\u0026rsquo;analyse des systèmes de fichiers etc.\nPour l\u0026rsquo;utiliser, nous devons créer une \u0026ldquo;Case\u0026rdquo; :\nIci, nous savons que nous n\u0026rsquo;avons pas à faire à une \u0026ldquo;Disk Image\u0026rdquo; ou à une VM, de même pour un disque local. Nous choisissons donc l\u0026rsquo;option appropriée \u0026ldquo;Logical Files\u0026rdquo; :\nOn attend qu\u0026rsquo;Autopsy \u0026amp; ses modules terminent l\u0026rsquo;ingestion. Cela peut prendre un moment.\nC\u0026rsquo;est bon, on peut commencer l\u0026rsquo;investigation :\nQuestions # Question 1 # Quelle est l\u0026rsquo;adresse mail de l\u0026rsquo;agent qui a été utilisée dans diverses applications/services ?\nPour y répondre, je vais utiliser le rapport qu\u0026rsquo;Autopsy a généré via ALEAPP (Android Logs Events And Protobuf Parser), un projet open-source qui vise à analyser tous les artefacts Android connus à des fins d\u0026rsquo;analyse forensic.\nPour trouver rapidement et simplement nous pouvons chercher dans :\n/data/data/com.android.vending/databases/library.db pour y trouver le compte google utilisé pour download des apps /data/data/com.android.providers.contacts/databases/contacts2.db pour y trouver le compte google utilisé pour synchroniser ses contacts Mais aussi (mais non applicable sur ce challenge) ici :\n/data/com.android.vending/shared_prefs/lastaccount.xml (dernier compte utilisé sur Google PlayStore (Android 9 et plus)) /data/com.google.android.gms/shared_prefs/BackupAccount.xml (email du compte de backup) /data/com.android.email/databases/EmailProvider.db (email accounts, 3rd party app data et les messages associés aux notifications par emails) Enfin bref, on se retrouve donc avec le rapport en format html :\nOn peut retrouver son adresse mail un peu partout.\nDans l\u0026rsquo;app \u0026ldquo;Chrome\u0026rdquo; par exemple avec la partie \u0026ldquo;Autofill\u0026rdquo; (fonctionnalité qui permet de remplir automatiquement des formulaires avec des informations préenregistrées) :\nDans les \u0026ldquo;Login Data\u0026rdquo; de Chrome :\nEnfin dans la partie \u0026ldquo;Installed Apps (Library)\u0026rdquo; nous retrouvons l\u0026rsquo;adresse mail du compte google utilisé pour download des apps :\nRéponse : olegpachinksy@gmail.com\nQuestion 2 # Quel est le numéro de contact du gestionnaire (handler) affecté à l\u0026rsquo;agent qui a été arrêté ?\nDans la partie \u0026ldquo;Contacts\u0026rdquo; :\nRéponse : +323145232315\nQuestion 3 # Récupérer les identifiants et le lien du portail officiel des agents ravenskiens. Cela peut nous donner un avantage en matière de renseignement car nous pouvons utiliser cet accès pour obtenir d\u0026rsquo;autres informations exploitables sur les opérations que le gouvernement ravenskien planifie.\nNous avons déjà trouvé la réponse à cette question à la question n°1 via les \u0026ldquo;Login Data\u0026rdquo; de Chrome :\nRéponse : agent.ravensk.idu.com:olegpachinksy007:HBLKNKD0MADsdfsa2334(*\u0026amp;DSMDB\nQuestion 4 # Quel est le code de contact utilisé pour confirmer l\u0026rsquo;identité de l\u0026rsquo;agent et du gestionnaire lors de l\u0026rsquo;utilisation d\u0026rsquo;un canal de discussion sécurisé ?\nPremièrement je vais vérifier les potentiels SMS ici : /data/data/com.android.providers.telephony/databases/mmssms.db.\nNous n\u0026rsquo;y trouvons rien.\nNous pourrions aussi chercher ici mais non applicable sur ce challenge :\n/data/com.google.android.gms/databases/icing_mmssms.db (SMS/MMS) /data/com.google.android.gms/databases/ipa_mmssms.db (SMS/MMS) Nous devons donc trouver l\u0026rsquo;app de messagerie utilisé. On peut voir toutes les apps installées dans la partie \u0026ldquo;Installed Programs\u0026rdquo; d\u0026rsquo;Autopsy :\nOn y trouve différente catégorie :\nInstalled Apps (GMS) Installed Apps (Library) Installed Apps (Vending) Installed Apps - GMS : Cette catégorie concerne les applications installées sur l\u0026rsquo;appareil, quel que soit leur mode d\u0026rsquo;installation. On peut retrouver ces données ici : /data/com.google.android.gms/databases/.\nInstalled Apps - Library : Cette catégorie se réfère à la bibliothèque d\u0026rsquo;applications pour l\u0026rsquo;utilisateur Google utilisant l\u0026rsquo;appareil. Il est important de noter que cette DB n\u0026rsquo;est pas liée aux applications installées sur l\u0026rsquo;appareil, elle peut contenir des applications installées par le même compte Google sur un autre appareil ou sur une précédente installation de l\u0026rsquo;appareil analysé. On peut retrouver ces données ici : /data/com.android.vending/databases/.\nInstalled Apps - Vending : Cette catégorie concerne spécifiquement les applications installées sur l\u0026rsquo;appareil via le Google Play Store, excluant celles installées par d\u0026rsquo;autres moyens. Ces données ne sont pas supprimées lorsque l\u0026rsquo;application est désinstallée. Elles sont stockées dans une DB SQLite située ici : /data/com.android.vending/databases/.\nPour plus de lisibilité retournons sur ALEAPP et concentrons-nous sur les apps de type \u0026ldquo;Vending\u0026rdquo; :\nL\u0026rsquo;app qui saute au yeux c\u0026rsquo;est mega.privacy.android.app. Et en effet, c\u0026rsquo;est une application de messagerie :\nJustement ALEAPP a parsé les messages échangés via MEGA :\nOn peut retrouver ces infomations ici : /data/data/mega.privacy.android.app/karere-TU1IaTh4TUJpdTQKAfO_2P0qU8NMP7zDRlgv.db.\nRéponse : REDAPPLEONACAR\nQuestion 5 # Le gestionnaire a partagé un document avec l\u0026rsquo;agent en utilisant un service de stockage cloud. Quand ce fichier a-t-il été partagé avec l\u0026rsquo;agent ?\nRien dans les messages. Le document a donc dû être transmis d\u0026rsquo;une autre manière. Nous savons qu\u0026rsquo;il n\u0026rsquo;y a pas d\u0026rsquo;autre app de messagerie et qu\u0026rsquo;il n\u0026rsquo;a pas pu lui communiquer via SMS/MMS.\nDans les app installé nous avons vu com.google.android.apps.docs. Allons donc chercher ici : \\data\\data\\com.google.android.apps.docs.\nOn y trouve la DB /data/data/com.google.android.apps.docs/app_cello/olegpachinksy@gmail.com/cello.db contenant ces informations :\nOn peut d\u0026rsquo;ailleurs retrouver ce fichier ici : EVIDENCE-CASE-RAVENSKIAN-AGENT-002/storage/emulated/0/Download/Debrief-Velorian OP Expansion East.pdf :\nNéanmoins attention, par défaut Autopsy interprète les timestamps avec la time zone de votre ordinateur. Pensez bien à modifier ce paramètre dans Autopsy (Tools \u0026gt; Options \u0026gt; View \u0026gt; Time Zone).\nRéponse : 2024-04-01 09:36:41\nQuestion 6 # Quel est l\u0026rsquo;URI de téléchargement du fichier partagé précédemment identifié ?\nNous savons que le fichier a été téléchargé car nous l\u0026rsquo;avons retrouvé dans /storage/emulated/0/Download/.\nNous pouvons donc chercher dans /data/data/com.android.providers.downloads/databases/downloads.db :\nRéponse : https://www.googleapis.com/drive/v2internal/files/1iQKKlBU2vuJD1Xet6IYPt7IODVtDHxv1?alt=media\u0026amp;source=downloadUrl\u0026amp;auditContext=fileAction\u0026amp;reason=909\u0026amp;syncType=1\u0026amp;featureLabel=android-sync-classic\u0026amp;openDrive=false\u0026amp;errorRecovery=false\u0026amp;originatorApp=102\nQuestion 7 # Afin d\u0026rsquo;obtenir davantage d\u0026rsquo;informations pour le contre-espionnage de Veloria, quel était l\u0026rsquo;objectif principal de cette cyber-opération menée par le gouvernement de Ravensk ?\nRevenons au document :\nRéponse : Infiltrate the Velorian secured network to gather intelligence on upcoming cyber-attacks, their techniques, and target countries.\nQuestion 8 # L\u0026rsquo;identification du gestionnaire est également cruciale pour que les forces de l\u0026rsquo;ordre véloriennes puissent comprendre l\u0026rsquo;étendue de cette opération. Quelle est l\u0026rsquo;adresse électronique utilisée par le manipulateur ?\nNous l\u0026rsquo;avons déjà vu dans les messages de l\u0026rsquo;app MEGA :\nRéponse : ivoryalex783@gmail.com\nQuestion 9 # Quel est le nom de l\u0026rsquo;endroit où l\u0026rsquo;agent et le gestionnaire se sont rencontrés ?\nRevenons aux messages :\nC\u0026rsquo;est la question qui m\u0026rsquo;a pris le plus de temps, j\u0026rsquo;ai dû bloquer une bonne heure dessus.\nPremièrement, j\u0026rsquo;ai cherché dans les endroits habituels :\n/data/com.google.android.apps.maps/databases/gmm_storage.db /data/com.google.android.apps.maps/databases/search_history.db /data/com.google.android.apps.maps/databases/da_destination_history /data/com.sec.android.daemonapp/db/weatherClock /data/com.google.android.apps.maps/app_tts-cache/ /data/com.google.android.apps.maps/cache/image_manager_disk_cache/ Après n\u0026rsquo;avoir rien trouvé, je me suis dit qu\u0026rsquo;il était sans doute possible que la réponse soit dans les metadatas des images sur le téléphone. En effet, on retrouve 48 images dont plusieurs de bar :\nNéanmoins, rien de probant.\nJe me suis donc posé plusieurs questions :\nil y a-t-il d\u0026rsquo;autres applications de navigation / localisation sur le téléphone ? est-il sûr que je dois chercher dans l\u0026rsquo;app Google Maps ? Non, seulement Google Maps. Non, il est peut-être possible qu\u0026rsquo;il ait fait la recherche sur son navigateur et non sur l\u0026rsquo;app etc. Ayant déjà vérifié les points habituels des artefacts de google maps j\u0026rsquo;ai préféré chercher dans le navigateur mais je n\u0026rsquo;ai rien trouvé.\nJe suis donc retourné fouiller dans les artefacts de google maps :\napp : RAS app_offline_downloads : RAS app_offline_hashes : RAS app_textures : RAS app_webview : RAS cache : RAS databases : trop de fichiers, j\u0026rsquo;y reviendrai plus tard files : \u0026ldquo;new_recent_history_cache_search.cs\u0026rdquo; Je me rends compte que j\u0026rsquo;aurais simplement pu chercher par mot-clé \u0026ldquo;Pub\u0026rdquo; 🤡\nRéponse : Levstik Pub\nQuestion 10 # D\u0026rsquo;après le chat retrouvé entre l\u0026rsquo;agent et le gestionnaire, il semble que ce dernier ait envoyé à l\u0026rsquo;agent arrêté une image relative à l\u0026rsquo;infrastructure utilisée par le gouvernement ravenskien pour cette opération de cyberespionnage. Quel est le cadre C2 utilisé par le gouvernement ravenskien ?\nAyant déjà vérifié toutes les images pour répondre à la question 9 j\u0026rsquo;ai déjà la réponse.\nRéponse : Empire\nQuestion 11 # La collecte d\u0026rsquo;informations sur l\u0026rsquo;infrastructure, telles que les adresses IP ou les noms d\u0026rsquo;hôtes, est cruciale pour les autorités véloriennes, qui préparent une opération de contre-offensive. D\u0026rsquo;après l\u0026rsquo;image récupérée envoyée par le gestionnaire à l\u0026rsquo;agent, quelle est l\u0026rsquo;adresse IP de l\u0026rsquo;un des serveurs C2 exploités par les acteurs de la menace ravenskiens ?\nRéponse : 98.24.12.45\n","date":"19 mai 2024","externalUrl":null,"permalink":"/blog-cyber/posts/opshieldwall-2/","section":"Posts","summary":"Scénario # Nous avons réussi à confirmer la localisation de l\u0026rsquo;acteur malveillant qui a compromis le réseau WiFi de notre gouvernement.","title":"OpShieldWall-2","type":"posts"},{"content":"","date":"19 mai 2024","externalUrl":null,"permalink":"/blog-cyber/tags/sherlock/","section":"Tags","summary":"","title":"Sherlock","type":"tags"},{"content":"","date":"7 mai 2024","externalUrl":null,"permalink":"/blog-cyber/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":"","date":"7 mai 2024","externalUrl":null,"permalink":"/blog-cyber/tags/network-forensic/","section":"Tags","summary":"","title":"Network Forensic","type":"tags"},{"content":" Scénario # Merci d\u0026rsquo;avoir répondu à notre appel. Le ministère de la Défense de Velorian a désespérément besoin d\u0026rsquo;aide\u0026hellip;\nNous devons rester discrets, mais nous pensons que le Wi-Fi public des bureaux du ministère de la Défense de Velorian a été compromis. L\u0026rsquo;impact semble faible, mais les diagrammes du réseau montrent qu\u0026rsquo;aucune segmentation réelle du réseau n\u0026rsquo;a été réalisée et que le trafic entre les appareils est autorisé. Les ministres du gouvernement utilisent ce réseau avec des équipements BYoD et des hôtes Velorian MoDNet. Veuillez analyser le pcap fourni et confirmer comment et quand cela s\u0026rsquo;est produit. N\u0026rsquo;oubliez pas que cette enquête est de type TLP Amber.\nFichiers # opshieldwall1.zip contenant la capture réseau \u0026ldquo;VELORIA-NETWORK.pcap\u0026rdquo; Setup # Au vu de la simplicité de ce challenge, on peut simplement se limiter à tshark / wireshark.\nQuestions # Question 1 # Veuillez confirmer le SSID de notre réseau WiFi.\nPremièrement, familiarisez-nous avec la capture. Nous allons utiliser la commande suivante afin d\u0026rsquo;avoir des statistiques :\n$ tshark -r traffic.pcapng -qz -r permet de lire (read) un fichier -q permet d\u0026rsquo;être plus \u0026ldquo;quiet\u0026rdquo; à la sortie (utile pour les stats car cela permet d\u0026rsquo;afficher les statistiques globales, et non par paquet.) -z permet l\u0026rsquo;affichage de statistiques Il y a beaucoup de valeurs possible (tshark -z help pour les afficher) mais ici nous souhaitons avant tout savoir :\nle nombre de paquet la durée de la capture les IPv4 avec le plus de paquet les IPv4 endpoints échangeant ensemble le plus les protocoles les plus utilisés Nombre de paquet et durée : 106 ; 31.6 sec\n$ tshark -r VELORIA-NETWORK.pcap -qz io,stat,0 =================================== | IO Statistics | | | | Duration: 31.6 secs | | Interval: 31.6 secs | | | | Col 1: Frames and bytes | |---------------------------------| | |1 | | | Interval | Frames | Bytes | | |-------------------------------| | | 0.0 \u0026lt;\u0026gt; 31.6 | 106 | 20759 | | =================================== IPv4 endpoints :\navec le plus de paquet : $ tshark -r VELORIA-NETWORK.pcap -qz endpoints,ip ================================================================================ IPv4 Endpoints Filter:\u0026lt;No Filter\u0026gt; | Packets | | Bytes | | Tx Packets | | Tx Bytes | | Rx Packets | | Rx Bytes | 0.0.0.0 3 1044 3 1044 0 0 255.255.255.255 3 1044 0 0 3 1044 10.0.3.1 3 1048 3 1048 0 0 10.0.3.52 3 1048 0 0 3 1048 ================================================================================ échangeant le plus : tshark -r VELORIA-NETWORK.pcap -qz conv,ip ================================================================================ IPv4 Conversations Filter:\u0026lt;No Filter\u0026gt; | \u0026lt;- | | -\u0026gt; | | Total | Relative | Duration | | Frames Bytes | | Frames Bytes | | Frames Bytes | Start | | 0.0.0.0 \u0026lt;-\u0026gt; 255.255.255.255 0 0 bytes 3 1044 bytes 3 1044 bytes 23.256576000 8.3680 10.0.3.1 \u0026lt;-\u0026gt; 10.0.3.52 0 0 bytes 3 1048 bytes 3 1048 bytes 23.256959000 8.3693 ================================================================================ Protocoles les plus utilisés :\ntshark -r VELORIA-NETWORK.pcap -qz io,phs =================================================================== Protocol Hierarchy Statistics Filter: sll frames:106 bytes:20759 radiotap frames:92 bytes:17572 wlan_radio frames:92 bytes:17572 wlan frames:92 bytes:17572 wlan.mgt frames:92 bytes:17572 eapol frames:6 bytes:999 eap frames:6 bytes:999 ip frames:6 bytes:2092 udp frames:6 bytes:2092 dhcp frames:6 bytes:2092 arp frames:2 bytes:96 =================================================================== Pour répondre à la question, il suffit d\u0026rsquo;utiliser la commande :\n$ tshark -r VELORIA-NETWORK.pcap -T fields -e wlan.ssid | head -n 1 | xxd -r -p VELORIA-MoD-AP012 Explication : (https://www.wireshark.org/docs/dfref/w/wlan.html)\n-t affiche uniquement les champs spécifiés par l\u0026rsquo;utilisateur (nécessite donc forcément l\u0026rsquo;utilisation de l\u0026rsquo;option -e pour spécifier les champs). -e wlan.ssid spécifie que le champ wlan.ssid (SSID des réseaux sans fil) doit être extrait et affiché. -xxd -r -p l\u0026rsquo;output étant une suite hexadécimale, cela permet de le convertir en texte lisible Réponse : VELORIA-MoD-AP012\nQuestion 2 # Veuillez confirmer l\u0026rsquo;adresse MAC du point d\u0026rsquo;accès (AP).\ntshark -r VELORIA-NETWORK.pcap -T fields -e wlan.sa | head -n 1 02:00:00:00:01:00 Réponse : 02:00:00:00:01:00\nQuestion 3 # Veuillez confirmer l\u0026rsquo;état/le mécanisme d\u0026rsquo;authentification de l\u0026rsquo;AP et le vecteur d\u0026rsquo;attaque.\nPassons à Wireshark.\nRéponse : WPS\nQuestion 4 # Quel est le numéro de paquet où l\u0026rsquo;attaque a-t-elle commencé ?\nOn peut facilement en déduire que c\u0026rsquo;est à la première tentative de connexion (étant les seuls dans la capture).\nRéponse : 93\nQuestion 5 # Quel est le numéro de paquet où l\u0026rsquo;attaque s\u0026rsquo;est-elle terminée ?\nOn peut facilement en déduire que c\u0026rsquo;est lorsque l\u0026rsquo;authentifcation a échoué.\nRéponse : 8\n","date":"7 mai 2024","externalUrl":null,"permalink":"/blog-cyber/posts/opshieldwall-1/","section":"Posts","summary":"Scénario # Merci d\u0026rsquo;avoir répondu à notre appel.","title":"OpShieldWall-1","type":"posts"},{"content":" Diplômes # Les images sont des liens cliquables.\nEn cours Mastère (BAC+5) - Expert de la sécurité des données, des réseaux et des systèmes\nUniquement en alternance\nhttps://www.francecompetences.fr/recherche/rncp/38951/ Bachelor (BAC+3) - Cybersécurité \u0026 Ethical Hacking\n3ème année en alternance\nMention - Très bien Bachelor (BAC+3) - Concepteur de Systèmes d'Information Mention - Très bien Liste de tous les challenges, labs, box etc. que j\u0026rsquo;ai effectué mais aussi des cours, conférences et trainings auquels j\u0026rsquo;ai assisté :\nHackTheBox # Iron = Insane Red = Hard Orange = Medium Green = Easy Purple = Very Easy Certaines images ne redirigent pas vers les pages de résultat d\u0026rsquo;HTB car se sont des boxs / sherlocks uniquement disponibles sur la plateforme HackTheBox Entreprise (qui ne permet pas de faire des liens de partage).\nSherlock # DFIR / SOC # OpShieldWall-7 Heartbreaker Trent APTNightmare OpShieldWall-4 OpShieldWall-2 OpShieldWall-1 Jingle Bell Recollection Noted Tracer Log Jammer Rogue One CrownJewel-2 CrownJewel-1 Brutus Malware Analysis # OpShieldWall-6 Loggy Heartbreaker Cloud # Nubilum-2 Box # Linux # OpShieldWall-5 OpShieldWall-3 Blurry Runner IClean Perfection BoardLight Headless Wifinetic MetaTwo Lame Nibbles Precious Windows # Jerry Netmon Blue HackTheBox Academy # Transcript.pdf\nRootMe # Cyberdefenders # Threat Hunting # Hard Network Forensics # Hard Medium Medium Medium Medium Medium Easy Easy Easy Easy Easy Easy Easy Easy Endpoint Forensics # Medium Easy Threat Intel # Medium Medium Easy Easy Easy Easy Cloud Forensics # Easy TryHackMe # 92 rooms complétés\nPath :\nPre Security Complete Beginner Web Fundamentals Comptia Pentest+ Cours # OALABS : Reverse Engineering 101 (RE101) Evasive Malware : A Field Guide to Detecting, Analyzing, and Defeating Advanced Threats (Kyle Cucci - no starch press) Kaspersky : Advanced Malware Analysis Techniques Kaspersky : Hunting APTs like a Ninja with YARA 13Cubed : Investigating Windows Endpoint 13Cubed : Investigating Windows Memory Roman Stuehler : Android App Hacking - Black Belt Edition Pentherz : Intro to SDR Hacking Christopher Negus : Linux Bible OSINT (Open Source Intelligence Techniques) : IntelTechniques Opdisk : The Cyber Plumber\u0026rsquo;s Handbook Conf \u0026amp; meetups # 2024 # DEFCON Paris Meetups HTB France 2023 # Hexacon DEFCON Paris LeHack Meetups HTB France ","date":"6 mai 2024","externalUrl":null,"permalink":"/blog-cyber/posts/portfolio/","section":"Posts","summary":"Diplômes # Les images sont des liens cliquables.","title":"Portfolio","type":"posts"},{"content":"Liste des projets que j\u0026rsquo;ai effecuté.\nSelf-Hosted Infrastructure # Juin 2023 - maintenant\nProfessional Server (HP ProLiant DL380 Gen9 2U) sous Proxmox Firewall sous OPNsense Self-hosted services et tools: VPN, Security Onion, Wazuh, Cuckoo Sandbox, GitLab, VM pour CTF, labs en tout genre (red team / blue team\u0026hellip;) Un lab spécial de Malware Analysis \u0026amp; d\u0026rsquo;OSINT avec une emphase sur la sécurité, la vie privée et l\u0026rsquo;OPSEC Architecture, network segmentation, intégration IPS/IDS, load balancing, SRE, VPN CTF Challenge Creator # Juin 2024 - Juin 2024\nCréation de deux challenges de radio (misc easy and medium) pour le \u0026ldquo;PwnMe CTF 2024\u0026rdquo;.\nhttps://ctftime.org/ctf/807/\nhttps://www.phreaks2600.fr/\nSide Quest - Toolkit Network Forensic \u0026amp; Malware Analysis # Févr. 2024 - Juin 2024\nNotre side quest est un projet collaboratif d\u0026rsquo;étudiants pour fournir un toolkit puissant pour la forensique réseau et l\u0026rsquo;analyse de malware. Ce repository contient deux sous-projets qui se concentrent sur différents aspects de l\u0026rsquo;investigation :\nNetwork Forensic Analysis : Outils d\u0026rsquo;analyse du trafic réseau capturé dans des fichiers PCAP. Analyse des malwares : Outils permettant de disséquer les fichiers binaires afin de découvrir des informations cachées et de détecter des caractéristiques malveillantes. https://github.com/jaybird1291/toolkit-network-forensic-malware-analysis-sidequest\n","date":"5 mai 2024","externalUrl":null,"permalink":"/blog-cyber/posts/projets/","section":"Posts","summary":"Liste des projets que j\u0026rsquo;ai effecuté.","title":"Projets","type":"posts"},{"content":"","externalUrl":null,"permalink":"/blog-cyber/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/blog-cyber/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/blog-cyber/series/","section":"Series","summary":"","title":"Series","type":"series"}]