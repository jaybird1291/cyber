[{"content":"","date":"2 May 2025","externalUrl":null,"permalink":"/blog-cyber/en/","section":"Jaybird1291","summary":"","title":"Jaybird1291","type":"page"},{"content":"","date":"2 May 2025","externalUrl":null,"permalink":"/blog-cyber/en/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2 March 2025","externalUrl":null,"permalink":"/blog-cyber/ja/tags/cyberdefenders/","section":"Tags","summary":"","title":"Cyberdefenders","type":"tags"},{"content":"","date":"2 March 2025","externalUrl":null,"permalink":"/blog-cyber/ja/tags/hard/","section":"Tags","summary":"","title":"Hard","type":"tags"},{"content":" シナリオ # InfiniTech Solutions の IT 従業員が、自身のメールアカウントに関連する異常なアクティビティを報告しました。調査の結果、その従業員の業務用認証情報が、最近のデータ漏洩により流出していたことが判明しました。\n従業員は、業務用メールアドレスを使ってサードパーティのプラットフォームに登録したため、認証情報が露出してしまいました。攻撃者はこの認証情報を悪用し、従業員のメールアカウントにアクセス、社内の他の従業員へフィッシングメールを送信しました。\nあなたのタスクは、ログを解析し、攻撃の範囲を把握し、ユーザーがフィッシングメールとどのように関わったのかを特定し、フィッシングキャンペーンがネットワークに与えた影響を明らかにすることです。\nセットアップ # この調査シナリオでは、主に Splunk Search を使ってログを解析します。また、xml.onlineviewer、Cyberchef、VirusTotal といった他のツールも併用します。\n注意事項 # Splunk は、システム、アプリケーション、ネットワーク機器などが生成するデータを収集、インデックス化、検索するための解析プラットフォームです。エンドポイントにインストールされたエージェント、ログファイルの取り込み、あるいは API を通じてログを取得します。\n取得したデータはインデックス化され、整理されることで検索プロセスが容易になります。Splunk は、このデータを問い合わせるために SPL（Search Processing Language）を使用します。\n初期アクセス # 質問 1 # どのメールアカウントが侵害され、攻撃の発信に使われたのか？\nまず、システム上で利用可能な \u0026ldquo;sourcetypes\u0026rdquo; を確認してみましょう:\nindex=\u0026#34;main\u0026#34; | stats count by sourcetype Splunk の sourcetype は、収集されたイベントのデータタイプや発信元を示すラベルです。\nこの質問に答えるため、まず \u0026ldquo;syslog\u0026rdquo; に注目します。syslog は、様々なデバイスから生成されるログを集約し、システムやセキュリティの詳細な情報を含むことが多いです。\n情報が溢れ出すのを防ぐため、正規表現を用いてメールアドレスのみを表示するように検索します:\n* sourcetype=syslog | regex _raw=\u0026#34;[\\w\\.-]+@[\\w\\.-]+\\.\\w+\u0026#34; 大量のログが表示されるので、各メールアドレスの出現回数をカウントし、テーブル形式で結果を表示します:\n* sourcetype=syslog | rex field=_raw \u0026#34;(?\u0026lt;email\u0026gt;[\\w\\.-]+@[\\w\\.-]+\\.\\w+)\u0026#34; | stats count by email | sort -count | head 10 | rename count AS \u0026#34;Number of occurrences\u0026#34;, email AS \u0026#34;Email address\u0026#34; これをグラフで可視化することも可能です:\n回答: twhite@infinitechsolutions.xyz\n質問 2 # 侵害されたアカウントを特定した後、攻撃者は社内の他の従業員にフィッシングメールを送信しました。時系列順に、カンマ区切りでこれらの従業員の名前を教えてください。\nメール送信ログのフォーマットは以下の通りです:\nUser [sender_email] [IP_address]; Message [message_ID] for [recipient_email] 検索には以下のクエリを実行します:\n* sourcetype=syslog \u0026#34;User twhite@infinitechsolutions.xyz\u0026#34; | rex field=_raw \u0026#34;Message \u0026lt;[^\u0026gt;]+\u0026gt; for (?\u0026lt;recipient\u0026gt;[\\w\\.-]+@[\\w\\.-]+\\.\\w+)\u0026#34; | table _time recipient | sort _time | stats list(recipient) as recipients | eval recipients=mvjoin(recipients, \u0026#34;, \u0026#34;) このクエリにより、受信者が時系列順に抽出され、一覧表示されます。\n具体的には、侵害されたアカウントのユーザーを選択し、正規表現で受信者のメールアドレスを抽出して変数に格納しています。その後、結果を時系列で並べ替え、読みやすい形式に整えています。\n回答: rnichols,llopez,gbaker,ahall\n質問 3 # 侵害されたアカウントから送信された悪意のある添付ファイルの名前は何ですか？\nこの質問は、予想以上に手間取りました。最初は、以下のように検索しました:\n* sourcetype=syslog \u0026#34;User twhite@infinitechsolutions.xyz\u0026#34; | regex _raw=\u0026#34;for (rnichols|llopez|gbaker|ahall)@infinitechsolutions\\.xyz\u0026#34; しかし、添付ファイルの痕跡は一切見つかりませんでした。そこで、「ふむ、正しい sourcetype にいないのか、他のものも検索してみよう」と思い、次のクエリで検索しました:\nindex=* \u0026#34;twhite@infinitechsolutions.xyz\u0026#34; | stats count by sourcetype 利用可能な sourcetype は syslog のみなので、正しい場所にいることが分かります。それから、フォーマットの問題を回避するために、単にファイル拡張子を探す方法に切り替えました。\nChatGPT にファイル拡張子のリストを求めた結果、以下のクエリにたどり着きました:\nindex=* sourcetype=syslog twhite@infinitechsolutions.xyz | rex field=_raw \u0026#34;attachment=(?\u0026lt;malicious_attachment\u0026gt;[\\w\\.-]+\\.(exe|zip|pdf|docx|xlsm|js|vbs|scr|bat))\u0026#34; | table _time malicious_attachment | sort _time それでも添付ファイルは見つかりませんでした。\nどうしても行き詰まったので、別の視点から考えることにしました。ラボのタイトルが \u0026ldquo;Midnight RDP\u0026rdquo; であることから、これは「Midnight Blizzard」として知られる APT を思い出させました。\n調査中に、「How Midnight Blizzard Uses Malicious .RDP Files to Exploit Windows Systems: A Technical Guide」（著: Yua Mikanana）という記事も見つけました。\nラボのタイトルを考えると、答えは明らかでした。そこで、\u0026quot;.RDP\u0026quot; を検索した結果、以下のファイルが見つかりました:\n回答: cloud zerotrust compliance.rdp\n実行 # 質問 1 # ユーザーの相互作用を分析した結果、悪意のある添付ファイルをダウンロードして実行した従業員は誰ですか？\nsourcetype を変更して、WinEventLog に切り替えます。\nWinEventLog は、Windows のイベントログで、エラー、警告、セキュリティ情報、またはアプリケーションイベントなど、システム上の様々な活動を記録し、追跡および解析を可能にします。\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; cloud zerotrust compliance.rdp ここで、ファイルをダウンロードしたユーザーのユーザー名が明確に確認できます: C:\\Users\\rnichols\\Downloads\\cloud zerotrust compliance.rdp\n回答: rnichols\n質問 2 # DC マシン上で、攻撃者がメモリ内で実行した DLL タグについて、この悪意のある DLL ファイルの SHA-256 ハッシュの最初の 10 バイトは何ですか？\nまず、DC 上で PowerShell に関連する DLL をリストアップします:\nindex=* sourcetype=xmlwineventlog \u0026#34;Powershell\u0026#34; | search host=\u0026#34;DC01\u0026#34; | rex field=_raw \u0026#34;(?\u0026lt;file\u0026gt;\\b\\w{6,8}\\.\\w{3}\\b)\u0026#34; | search file=\u0026#34;*dll\u0026#34; 完全なスクリプトが 1 つのイベントに収録するには長すぎるため、セグメントに分割されていることが分かります。これは MessageNumber によって確認できます:\n2 つのイベントは同じ ActivityID {0B39225B-3C43-0001-5078-390B433CDB01} やその他の識別子を共有しており、同じスクリプト実行に属していることを示しています。\n最初のセグメント (MessageNumber = 1) には、PowerShell 環境の設定や、func_get_proc_address、func_get_delegate_type といった関数の定義など、スクリプトの冒頭部分が含まれています。\n最後のセグメント (MessageNumber = 33) には、Base64 文字列（キー 35 で XOR されたもの）のデコードや、デコードされたコードを実行するためのメモリ割り当て部分が含まれています。\nこれらのセグメントを合わせることで、メモリ内にコードを注入・実行するためのペイロード全体が再構成されます。\n再構成されたスクリプトは、難読化されたペイロード（まず Base64、次に 35 で XOR されたもの）をデコードし、ネイティブな Windows 関数（例: VirtualAlloc を介した GetProcAddress や GetDelegateForFunctionPointer）を使用してメモリを割り当て、悪意のあるコードを実行します。\n[...] $var [...] -bxor 35 [...] Splunk 検索を使用して再構成することができます:\nindex=* sourcetype=xmlwineventlog EventID=4104 0B39225B-3C43-0001-5078-390B433CDB01 | stats values(ScriptBlockText) as Script by SystemTime | table Script その後、Cyberchef を使ってスクリプトをデコードします:\nそして、問題の DLL が見つかります:\n最後に、ファイルを抽出し、そのハッシュを取得します:\n回答: 0ee6bc20a7f855d881cce962de09c77960ea5c85ca013e3d123fce61109ff8c5\nPersistence # 質問 1 # 悪意ある接続が確立された後、システム上にファイルがドロップされました。このドロップされたファイルの名前は何ですか？\n.rdp ファイルが 20:45:27 ごろに実行されたことが分かっています（実行セクションの質問 1 を参照）。\nそのため、その時刻から検索を開始します。\nまず、PowerShell コマンド（Invoke-WebRequest、curl など）を使って Splunk でダウンロードを検索してみましたが、結果は得られませんでした。\nそこで、検索クエリを以下のように変更しました:\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time なぜこれが動作するのでしょうか？\n以下はイベントの詳細です:\nフィールド TerminalSessionId=3 は、ユーザーが RDP セッションを介して接続していたことを強く示唆しています。なぜなら:\nセッション 0 はしばしば SYSTEM に使用されます。 ローカルの対話セッションは 通常 1 から始まります。 RDP セッションはしばしばより高い ID（例: 2, 3 など）を持ちます。 explorer.exe は Windows のグラフィカルインターフェースの主要プロセスであり、対話型ユーザーが起動するプログラムのランチャーとして機能します。\nこの動作を説明する考えられるシナリオ:\n対話セッション（RDP であるかどうかにかかわらず）:\nもし rnichols が RDP 経由で接続していれば、explorer.exe はユーザーシェルとして起動し、Startup に定義されたプログラム（ztssvc.exe）を実行します。 ユーザーが物理的にログインした場合や、runas などのサービスを通じても同様の状況が発生します。 ユーザーのログイン時に自動実行:\nztssvc.exe が Startup に配置されているため、ユーザーがログインするとすぐに実行されます（ローカルログインでも RDP 経由でも）。 explorer.exe を介したインジェクションまたは永続化:\n攻撃者が Startup を利用してマルウェアを持続させた場合、explorer.exe はユーザーがログインするたびに自動的にそのバイナリを実行します。 攻撃者によるエクスプロイトまたは強制実行:\nもし explorer.exe が（例えば DLL インジェクションなどにより）改ざんされていれば、ztssvc.exe を実行するために使用された可能性があります。 回答: ztssvc.exe\n質問 2 # 長期的なアクセスを維持するために、攻撃者は侵害されたマシン上でスケジュールされたタスクを作成しました。このタスクの名前は何ですか？\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; EventCode=4698 OR EventCode=4702 | search user=\u0026#34;rnichols\u0026#34; | table _time EventCode TaskName Command User | rename EventCode as \u0026#34;Event ID\u0026#34;, TaskName as \u0026#34;Scheduled Task\u0026#34;, Command as \u0026#34;Executed Command\u0026#34; | sort _time 質問 3 # 永続性戦略の一環として、攻撃者は新たなユーザーアカウントを作成しました。この不正なアカウントの名前は何ですか？\n質問 1 と同じクエリを使用します:\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time 結果の中に、非常に怪しげなエンコードされた PowerShell コマンドが見つかります:\nこのコマンドを Cyberchef を使ってデコードしました:\n回答: Administrator\n質問 4 # リモートアクセスを容易にするため、攻撃者はリモートデスクトップの設定を変更しました。RDP (Remote Desktop Protocol) 接続の許可を決定するレジストリキーの名前は何ですか？\n多数の Windows システムの調査・管理経験から、既に答えは分かっていましたが、確認方法は以下の通りです:\n攻撃者が実行した複数の -EncodedCommand を含む PowerShell コマンドを常に検索します:\nその中で、以下のコマンドが確認できます:\n回答: fDenyTSConnections\n質問 5 # さらなる調査により、DC 上で新しいユーザーアカウントが作成されたことが判明しました。このアカウントの名前は何ですか？\nこれは他のホストで行われたのと同じ方法で実施されたと考えられます。そこで、以下のように検索します:\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; host=\u0026#34;DC01\u0026#34; \u0026#34;-EncodedCommand\u0026#34; 回答: rniclos\n特権昇格 # 質問 1 # 特権昇格手法を調査した際、攻撃者が悪用した特権 COM インターフェースの CLSID の最後の 6 バイトは何ですか？\nCLSID は、Windows COM (Component Object Model) において、レジストリ内の COM オブジェクトを識別するためのグローバルに一意な識別子 (GUID) です。\n攻撃者は、特権を持つ COM インターフェースの CLSID を利用して、より高い権限でコードを実行します：\n誤設定された COM オブジェクトを悪用して特権を昇格させます。 攻撃者は regsvr32.exe、powershell、mshta.exe、または rundll32.exe を介して、特権 COM インターフェース* を作成、操作、または呼び出すことが可能です。 ここでは、マルウェアが ztssvc.exe であることが分かっているので、ztssvc.exe の実行に関連する EventCode \u0026ldquo;1\u0026rdquo;（プロセス作成）イベントを検索し、IntegrityLevel が \u0026ldquo;High\u0026rdquo; のものだけをフィルタリングします:\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; EventCode=1 | search Image=\u0026#34;*ztssvc.exe*\u0026#34; | search IntegrityLevel=\u0026#34;High\u0026#34; | table _time User CommandLine IntegrityLevel ParentCommandLine | sort _time 回答: 7CE93B6DC937\n質問 2 # 特権昇格のために、攻撃者はシステム上に別のファイルをドロップしました。このファイルの名前は何ですか？\n最初のファイル（ztssvc.exe）のダウンロード後に発生したすべての動作を確認するため、同じコマンドを実行します:\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | search NOT ParentCommandLine=\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time 回答: Akagi64.exe\n防御回避 # 質問 1 # 攻撃者は、システムの動作を変更してセキュリティ設定を弱体化させようと試みました。管理者ユーザー向けのユーザーアカウント制御 (UAC) プロンプト設定を管理するレジストリキーの名前は何ですか？\nこの回答は、先に観察されたエンコードされた PowerShell コマンド内に見つかります:\n回答: ConsentPromptBehaviorAdmin\n質問 2 # 検出を回避するため、攻撃者はタグを保護されたシステムディレクトリに移動させました。この移動された悪意あるファイルの名前は何ですか？\n移動が行われた場合、ファイルの作成または名前変更のイベント (Event ID 11 または 2) が発生しているはずです。\nindex=* sourcetype=xmlwineventlog EventCode=11 OR EventCode=2 \u0026#34;rnichols\u0026#34; | search TargetFilename=\u0026#34;C:\\\\Windows\\\\System32\\\\*\u0026#34; OR TargetFilename=\u0026#34;C:\\\\Windows\\\\SysWOW64\\\\*\u0026#34; OR TargetFilename=\u0026#34;C:\\\\ProgramData\\\\*\u0026#34; | table _time User TargetFilename ProcessName | sort _time 回答: Amazon ZeroTrust Compl.exe\n発見 # 質問 1 # 侵害されたマシン上で攻撃者の最初の行動を特定するため、システム情報を収集する最初のコマンドは何でしたか？\nマシンが 20:45:27 に侵害されたことが分かっているので（実行セクションの質問 1 を参照）、その時刻から検索を開始します:\nindex=* sourcetype=\u0026#34;xmlwineventlog\u0026#34; \u0026#34;rnichols\u0026#34; | rex field=_raw \u0026#34;CommandLine=(?\u0026lt;CommandLine\u0026gt;.*)\u0026#34; | fillnull value=\u0026#34;\u0026#34; | search NOT CommandLine=\u0026#34;\u0026lt;/Data\u0026gt;\u0026lt;/EventData\u0026gt;\u0026lt;/Event\u0026gt;\u0026#34;,\u0026#34;\u0026#34; | search NOT ParentCommandLine=\u0026#34;\u0026#34; | stats values(CommandLine) as CommandLine by _time, ParentCommandLine | sort — _time 回答: whoami /groups\n横方向の移動 # 質問 1 # 攻撃者はどのツールを使用して DC への横方向の移動を行いましたか？\n再度、エンコードされた PowerShell コマンドを調査する必要があります。今回は、Amazon ZeroTrust Compl.exe によって発行されたコマンドです:\npowershell -nop -exec bypass -EncodedCommand UwBlAHQALQBJAHQAZQBtACAAVwBTAE0AYQBuADoAXABsAG8AYwBhAGwAaABvAHMAdABcAEMAbABpAGUAbgB0AFwAVAByAHUAcwB0AGUAZABIAG8AcwB0AHMAIAAtAFYAYQBsAHUAZQAgACIARABDADAAMQAuAGEAZAAuAGkAbgBmAGkAbgBuAGkAdABlAGMAaABzAG8AbAB1AHQAZQBuAHMALgB4AHkAegAiACAALQBGAG8AcgBjAGUA このコマンドは、IT01 上の Windows Remote Management (WinRM) の設定を変更し、DC01.ad.infinitechsolutions.xyz をリモート接続用に信頼するようにしています。これは、PowerShell リモーティング（WinRM）を介した横方向の移動の強い指標です。\n回答: WinRM\nコマンド＆コントロール # 質問 1 # 攻撃者の活動をたどると、悪意のあるメールが送信された元の IP アドレスは何でしたか？\nフィッシングメールを送信したユーザーを検索することで、最初の質問に戻ります:\nindex=* sourcetype=syslog \u0026#34;User twhite@infinitechsolutions.xyz\u0026#34; 回答: 3.78.253.99\n質問 2 # cloud zerotrust compliance.rdp が IT01 で実行され、送信者のメール IP アドレスが判明しているため、以下のクエリで直接テストできます:\nindex=* sourcetype=xmlwineventlog (EventCode=1 OR EventCode=3) | search host=\u0026#34;IT01\u0026#34; | search DestinationPort=3389 AND DestinationIp=3.78.253.99 | table _time User DestinationIp DestinationPort | sort _time 回答: 3.78.253.99:3389\n質問 3 # 解析の結果、ドロップされたファイルが Cobalt Strike のビーコンとして機能していることが明らかになりました。このビーコンが通信するコマンド＆コントロール (C\u0026amp;C) サーバーのエンドポイントは何ですか？\nまず、どのファイルが Cobalt Strike のビーコンであるかを確認します:\nその後、Amazon ZeroTrust Compl.exe がどの IP/ポートに接続したかを調査します:\nindex=* sourcetype=xmlwineventlog EventCode=3 | search Image=\u0026#34;*Amazon ZeroTrust Compl.exe*\u0026#34; | search NOT DestinationIp=\u0026#34;\u0026#34; | table _time User Image DestinationIp DestinationPort Protocol | sort _time (EventCode 3 は、Windows マシン上のプロセスが確立したネットワーク接続に対応します)\n回答: 3.78.244.11:8080\n質問 4 # DLL の設定を調査すると、ビーコンの通信を指示する \u0026lsquo;C2Server\u0026rsquo; キーにはどのような値が設定されていますか？\nVirusTotal に戻り、「Behavior」タブでこの情報を確認します。\n回答: 3.78.244.11,/dot.gif\nLab 完了！\n","date":"2 March 2025","externalUrl":null,"permalink":"/blog-cyber/ja/posts/midnight-rdp/","section":"Posts","summary":"シナリオ # InfiniTech Solutions の IT 従業員が、自身のメールアカウントに関連する異常なアクティビティを報告しました。調査の結果、その従業員の業務用認証情報が、最近のデータ漏洩により流出していたことが判明しました。","title":"Midnight RDP Lab","type":"posts"},{"content":"","date":"2 March 2025","externalUrl":null,"permalink":"/blog-cyber/ja/tags/splunk/","section":"Tags","summary":"","title":"Splunk","type":"tags"},{"content":"","date":"2 March 2025","externalUrl":null,"permalink":"/blog-cyber/ja/tags/threat-hunting/","section":"Tags","summary":"","title":"Threat Hunting","type":"tags"},{"content":"","date":"19 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/android-forensic/","section":"Tags","summary":"","title":"Android Forensic","type":"tags"},{"content":"","date":"19 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/autopsy/","section":"Tags","summary":"","title":"Autopsy","type":"tags"},{"content":"","date":"19 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":" Scenario # We have successfully confirmed the location of the malicious actor who compromised our government’s WiFi network.\nRecently, a dawn raid was conducted as part of OP ERADICATE at an address in the Velorian capital, resulting in the seizure of a substantial amount of evidence. Notably, an Android device belonging to the agent was confiscated, and it is believed to have been at the scene of the attack.\nWe require your expertise to analyze this device and answer the detailed questions below. Time is limited; a Velorian COBR meeting has been organized to discuss your findings\u0026hellip;\nFiles # opshieldwall2.zip containing \u0026ldquo;EVIDENCE-CASE-RAVENSKIAN-AGENT-002,\u0026rdquo; which includes the \u0026ldquo;data\u0026rdquo; and \u0026ldquo;storage\u0026rdquo; folders of an Android device. This provides a significant amount of room for analysis, as the /data directory contains a wealth of information, such as:\nCheatsheet SANS FOR585 Foreword # Before we begin, here is some important information about Android:\nUser data on Android can be stored both internally and externally. Internal data is saved in NAND flash memory, a non-volatile memory that retains data even when the power is off. NAND stores the bootloader, the operating system, and user data. Application data is stored on NAND flash memory or on the SD card.\nAndroid is based on variants of the Long-Term Support (LTS) branches of the Linux Kernel. With Android v8 (Oreo), Google required the use of Linux Kernel version 4.4 or higher. For example, Android v9 (Pie) runs on versions 4.4, 4.9, or 4.14, depending on the device. More information is available on the Android OS wiki: https://source.android.com/docs/core/architecture/kernel/android-common?hl=en.\nandroid-mainline is the primary development branch for Android features. The mainline Linux branch is merged with android-mainline every time Linus Torvalds releases a version or release candidate:\nCommonly found file systems include:\nEXT4 F2FS YAFFS2 exFAT Most artifacts are stored as SQLite databases and XML files. Android isolates applications at the kernel level, assigning each one a unique identifier (UID) to track running applications.\nAndroid Architecture # The Linux kernel forms the foundation of Android, supporting essential features like threads and low-level memory management used by Android Runtime (ART).\nThe Hardware Abstraction Layer (HAL) provides standardized interfaces that expose hardware functionality to higher-level Java APIs. It consists of library modules specific to each hardware component (such as the camera or Bluetooth). When an API accesses hardware, Android loads the corresponding library module.\nThe Android Runtime (ART) environment runs each application in its own process and instance. ART manages multiple virtual machines on low-memory devices, using DEX bytecode specially designed and optimized for Android. Compilation tools like d8 transform Java code into DEX bytecode for execution on Android.\nMany essential Android system components and services, such as ART and HAL, are created from native code requiring native libraries written in C and C++.\nAndroid\u0026rsquo;s features are accessible via Java APIs, facilitating the reuse of key modular system components and services like notifications, resource management, and localization.\nSystem applications are the core set of apps that come with Android.\nAndroid Virtual Machine # Virtual Machines (VMs) act as abstraction layers between an application and the underlying Android device.\nEach application runs in its own instance within a VM, isolating it from other applications.\nAndroid applications are written in Java but are compiled into Java bytecode.\nThis bytecode is then transformed into Dalvik bytecode (.dex files) or ART bytecode.\nDalvik and ART run the bytecode (.dex) in a virtual machine, allowing applications to function independently of the underlying hardware.\nBefore KitKat (v.4.4), Android used Dalvik VMs.\nStarting with Lollipop (v5.0), Android began using Android Runtime (ART) and phased out Dalvik VM.\nBoth Dalvik and ART use DEX bytecode, but ART includes new optimization features.\nDirectory Structure # /cache: Can contain Gmail attachments, downloads, browsing data, and OTA updates. /efs: Contains files necessary for device operation in case of failure. /data: /data/data: Contains application folders (/data/data/com.example.app), app configuration files, SQLite databases, logs, cache, etc. /app: Stores .apk files from the Android market. *Malware may be found here. /backup: Stores backup APIs for developers; user backup data is not stored here. /media: Internal storage equivalent to an SD card. *Malware may be found here. /misc: Stores files related to Bluetooth, DHCP, VPN, Wi-Fi, etc. /system: Contains key files such as gesture.key and passwords.key; the accounts.db file, which stores usernames and passwords for file authentication, etc. /property: Stores system properties, including timezone, language settings, etc. /mnt: /asec: Stores unencrypted app data. /DCIM: Stores album thumbnails. /Pictures: Stores camera images. /downloads: Locally downloaded files. /secure/asec: Stores encrypted app data. /system: /app: Contains .apk files. *Malware may be found here. /priv-app: Contains .apk files with system-level permissions. *Malware may be found here. For more information on:\nApp permissions: https://developer.android.com/guide/topics/permissions/overview?hl=en, https://blog.mindorks.com/what-are-the-different-protection-levels-in-android-permission/ Android CLI: https://developer.android.com/tools/adb?hl=en Setup # Given the files and the scenario, I will use the Autopsy tool. Setting it up may take some time, so I’m starting with it here.\nIf you\u0026rsquo;re unfamiliar with Autopsy, here’s a brief description:\nAutopsy is an open-source digital investigation tool. It serves as the graphical interface for the Sleuth Kit and other forensic tools. It is commonly used to analyze hard drives and smartphones in the context of investigations. Key features of Autopsy include deleted file recovery, metadata analysis, keyword searching, timeline visualization, file system analysis, and more.\nTo use it, we need to create a \u0026ldquo;Case\u0026rdquo;:\nHere, we know we’re not dealing with a \u0026ldquo;Disk Image\u0026rdquo; or a VM, nor a local disk. Therefore, we select the appropriate option, \u0026ldquo;Logical Files\u0026rdquo;:\nWe wait for Autopsy and its modules to complete the ingestion process. This may take some time.\nAll set, we can begin the investigation:\nQuestions # Question 1 # What is the email address used by the agent in various applications/services? To answer this, I will use the report generated by Autopsy via ALEAPP (Android Logs Events And Protobuf Parser), an open-source project aimed at parsing all known Android artifacts for forensic analysis.\nTo find it quickly and easily, we can search in:\n/data/data/com.android.vending/databases/library.db to find the Google account used to download apps. /data/data/com.android.providers.contacts/databases/contacts2.db to find the Google account used to sync contacts. Additionally (not applicable in this challenge):\n/data/com.android.vending/shared_prefs/lastaccount.xml (last account used on Google PlayStore for Android 9 and later). /data/com.google.android.gms/shared_prefs/BackupAccount.xml (email for backup account). /data/com.android.email/databases/EmailProvider.db (email accounts, 3rd-party app data, and messages associated with email notifications). Finally, we end up with the HTML report:\nThe email address can be found in various places.\nFor example, in the \u0026ldquo;Chrome\u0026rdquo; app under \u0026ldquo;Autofill\u0026rdquo; (a feature that automatically fills in forms with saved information):\nIn the Chrome \u0026ldquo;Login Data\u0026rdquo;:\nAnd in the \u0026ldquo;Installed Apps (Library)\u0026rdquo; section, we find the Google account email used for app downloads:\nAnswer: olegpachinksy@gmail.com\nQuestion 2 # What is the contact number of the handler assigned to the arrested agent?\nIn the \u0026ldquo;Contacts\u0026rdquo; section:\nAnswer: +323145232315\nQuestion 3 # Retrieve the credentials and link to the official portal for Ravenski agents. This could provide an intelligence advantage by using this access to gather actionable information about upcoming operations planned by the Ravenski government.\nWe already found the answer to this question in Question 1 via Chrome \u0026ldquo;Login Data\u0026rdquo;:\nAnswer: agent.ravensk.idu.com:olegpachinksy007:HBLKNKD0MADsdfsa2334(*\u0026amp;DSMDB\nQuestion 4 # What is the contact code used to confirm the identity of the agent and handler when using a secure chat channel?\nFirst, I’ll check for potential SMS messages here: /data/data/com.android.providers.telephony/databases/mmssms.db.\nNothing found.\nWe could also check here, though not applicable in this challenge:\n/data/com.google.android.gms/databases/icing_mmssms.db (SMS/MMS). /data/com.google.android.gms/databases/ipa_mmssms.db (SMS/MMS). We need to find the messaging app used. In Autopsy’s \u0026ldquo;Installed Programs\u0026rdquo; section, we can view all installed apps:\nDifferent categories are shown:\nInstalled Apps (GMS) Installed Apps (Library) Installed Apps (Vending) Installed Apps - GMS: This category refers to apps installed on the device, regardless of their installation method. Data can be found here: /data/com.google.android.gms/databases/.\nInstalled Apps - Library: This category refers to the app library for the Google user on the device. It may contain apps installed by the same Google account on another device or a previous installation. Data is stored here: /data/com.android.vending/databases/.\nInstalled Apps - Vending: This category specifically refers to apps installed via the Google Play Store. Data is retained even if the app is uninstalled and is located here: /data/com.android.vending/databases/.\nFor clarity, let’s return to ALEAPP and focus on \u0026ldquo;Vending\u0026rdquo; type apps:\nThe app that stands out is mega.privacy.android.app. Indeed, it’s a messaging application:\nALEAPP has parsed messages exchanged via MEGA:\nWe can find this information here: /data/data/mega.privacy.android.app/karere-TU1IaTh4TUJpdTQKAfO_2P0qU8NMP7zDRlgv.db.\nAnswer: REDAPPLEONACAR\nQuestion 5 # The handler shared a document with the agent using a cloud storage service. When was this file shared with the agent?\nNothing found in messages. The document must have been sent another way. We know there’s no other messaging app, and it couldn’t have been sent via SMS/MMS.\nIn the installed apps, we saw com.google.android.apps.docs. Let’s check here: \\data\\data\\com.google.android.apps.docs.\nWe find the database /data/data/com.google.android.apps.docs/app_cello/olegpachinksy@gmail.com/cello.db containing this information:\nThe file can also be found here: EVIDENCE-CASE-RAVENSKIAN-AGENT-002/storage/emulated/0/Download/Debrief-Velorian OP Expansion East.pdf:\nNote: Autopsy interprets timestamps using your computer’s time zone by default. Remember to adjust this setting in Autopsy (Tools \u0026gt; Options \u0026gt; View \u0026gt; Time Zone).\nAnswer: 2024-04-01 09:36:41\nQuestion 6 # What is the download URI for the previously identified shared file?\nWe know the file was downloaded, as we found it in /storage/emulated/0/Download/.\nThus, we can search in /data/data/com.android.providers.downloads/databases/downloads.db:\nAnswer: https://www.googleapis.com/drive/v2internal/files/1iQKKlBU2vuJD1Xet6IYPt7IODVtDHxv1?alt=media\u0026amp;source=downloadUrl\u0026amp;auditContext=fileAction\u0026amp;reason=909\u0026amp;syncType=1\u0026amp;featureLabel=android-sync-classic\u0026amp;openDrive=false\u0026amp;errorRecovery=false\u0026amp;originatorApp=102\nQuestion 7 # To gather further intelligence for Veloria’s counter-espionage efforts, what was the primary objective of this cyber operation led by the Ravenski government?\nReturning to the document:\nAnswer: Infiltrate the Velorian secured network to gather intelligence on upcoming cyber-attacks, their techniques, and target countries.\nQuestion 8 # Identifying the handler is also crucial for Velorian law enforcement to understand the scope of this operation. What is the handler’s email address?\nWe already saw this in the MEGA app messages:\nAnswer: ivoryalex783@gmail.com\nQuestion 9 # What is the name of the place where the agent and handler met?\nReturning to the messages:\nThis question took the most time; I spent about an hour on it.\nInitially, I searched the usual locations:\n/data/com.google.android.apps.maps/databases/gmm_storage.db /data/com.google.android.apps.maps/databases/search_history.db /data/com.google.android.apps.maps/databases/da_destination_history /data/com.sec.android.daemonapp/db/weatherClock /data/com.google.android.apps.maps/app_tts-cache/ /data/com.google.android.apps.maps/cache/image_manager_disk_cache/ After finding nothing, I thought the answer might be in the metadata of images on the phone. Indeed, there were 48 images, several of which showed bars:\nHowever, nothing conclusive.\nI then questioned:\nAre there other navigation/location apps on the phone? Is it certain I should look in the Google Maps app? No, only Google Maps. No, it’s possible the search was made in the browser instead. After checking typical Google Maps artifacts, I decided to search in the browser but found nothing.\nSo I returned to digging through Google Maps artifacts:\napp: nothing relevant app_offline_downloads: nothing relevant app_offline_hashes: nothing relevant app_textures: nothing relevant app_webview: nothing relevant cache: nothing relevant databases: too many files, will revisit files: \u0026ldquo;new_recent_history_cache_search.cs\u0026rdquo; It turns out I could have simply searched for the keyword \u0026ldquo;Pub\u0026rdquo; 🤡\nAnswer: Levstik Pub\nQuestion 10 # According to the chat between the agent and handler, it appears that the handler sent the agent an image related to the infrastructure used by the Ravenski government for this cyber-espionage operation. What C2 framework is used by the Ravenski government?\nHaving already reviewed all images for Question 9, I have the answer.\nAnswer: Empire\nQuestion 11 # Collecting information on infrastructure, such as IP addresses or hostnames, is crucial for Velorian authorities as they prepare a counter-offensive. Based on the recovered image sent by the handler to the agent, what is the IP address of one of the C2 servers operated by Ravenski threat actors?\nAnswer: 98.24.12.45\n","date":"19 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/posts/opshieldwall-2/","section":"Posts","summary":"Scenario # We have successfully confirmed the location of the malicious actor who compromised our government’s WiFi network.","title":"OpShieldWall-2","type":"posts"},{"content":"","date":"19 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/sherlock/","section":"Tags","summary":"","title":"Sherlock","type":"tags"},{"content":"","date":"19 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"7 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":"","date":"7 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/tags/network-forensic/","section":"Tags","summary":"","title":"Network Forensic","type":"tags"},{"content":" Scenario # Thank you for responding to our call. The Ministry of Defense of Velorian is in desperate need of assistance\u0026hellip;\nWe need to keep this discreet, but we believe that the public WiFi at the Ministry of Defense offices in Velorian has been compromised. The impact seems minimal, but network diagrams show that no real segmentation of the network has been implemented and that device-to-device traffic is allowed. Government ministers use this network with BYoD equipment and Velorian MoDNet hosts. Please analyze the provided pcap file and confirm how and when this occurred. Remember that this investigation is classified as TLP Amber.\nFiles # opshieldwall1.zip containing the network capture \u0026ldquo;VELORIA-NETWORK.pcap\u0026rdquo; Setup # Given the simplicity of this challenge, we can limit ourselves to tshark / wireshark.\nQuestions # Question 1 # Please confirm the SSID of our WiFi network.\nFirst, let’s get familiar with the capture. We’ll use the following command to gather some statistics:\n$ tshark -r traffic.pcapng -qz -r allows reading a file -q makes the output quieter (useful for stats as it displays global statistics, not per packet) -z enables statistics display There are many possible values (tshark -z help to display them), but here we primarily want to know:\nthe packet count the capture duration the IPv4 addresses with the most packets the IPv4 endpoints exchanging the most the most used protocols Packet count and duration: 106; 31.6 sec\n$ tshark -r VELORIA-NETWORK.pcap -qz io,stat,0 =================================== | IO Statistics | | | | Duration: 31.6 secs | | Interval: 31.6 secs | | | | Col 1: Frames and bytes | |---------------------------------| | |1 | | | Interval | Frames | Bytes | | |-------------------------------| | | 0.0 \u0026lt;\u0026gt; 31.6 | 106 | 20759 | | =================================== IPv4 endpoints:\nwith the most packets: $ tshark -r VELORIA-NETWORK.pcap -qz endpoints,ip ================================================================================ IPv4 Endpoints Filter:\u0026lt;No Filter\u0026gt; | Packets | | Bytes | | Tx Packets | | Tx Bytes | | Rx Packets | | Rx Bytes | 0.0.0.0 3 1044 3 1044 0 0 255.255.255.255 3 1044 0 0 3 1044 10.0.3.1 3 1048 3 1048 0 0 10.0.3.52 3 1048 0 0 3 1048 ================================================================================ exchanging the most: tshark -r VELORIA-NETWORK.pcap -qz conv,ip ================================================================================ IPv4 Conversations Filter:\u0026lt;No Filter\u0026gt; | \u0026lt;- | | -\u0026gt; | | Total | Relative | Duration | | Frames Bytes | | Frames Bytes | | Frames Bytes | Start | | 0.0.0.0 \u0026lt;-\u0026gt; 255.255.255.255 0 0 bytes 3 1044 bytes 3 1044 bytes 23.256576000 8.3680 10.0.3.1 \u0026lt;-\u0026gt; 10.0.3.52 0 0 bytes 3 1048 bytes 3 1048 bytes 23.256959000 8.3693 ================================================================================ Most used protocols:\ntshark -r VELORIA-NETWORK.pcap -qz io,phs =================================================================== Protocol Hierarchy Statistics Filter: sll frames:106 bytes:20759 radiotap frames:92 bytes:17572 wlan_radio frames:92 bytes:17572 wlan frames:92 bytes:17572 wlan.mgt frames:92 bytes:17572 eapol frames:6 bytes:999 eap frames:6 bytes:999 ip frames:6 bytes:2092 udp frames:6 bytes:2092 dhcp frames:6 bytes:2092 arp frames:2 bytes:96 =================================================================== To answer, we can simply use the command:\n$ tshark -r VELORIA-NETWORK.pcap -T fields -e wlan.ssid | head -n 1 | xxd -r -p VELORIA-MoD-AP012 Explication : (https://www.wireshark.org/docs/dfref/w/wlan.html)\n-t displays only user-specified fields (thus requiring the use of the -e option to specify fields) -e wlan.ssid specifies that the wlan.ssid field (SSID of wireless networks) should be extracted and displayed -xxd -r -p converts the output from hexadecimal to readable text Answer : VELORIA-MoD-AP012\nQuestion 2 # Please confirm the MAC address of the access point (AP).\ntshark -r VELORIA-NETWORK.pcap -T fields -e wlan.sa | head -n 1 02:00:00:00:01:00 Answer : 02:00:00:00:01:00\nQuestion 3 # Please confirm the AP’s authentication state/mechanism and attack vector.\nSwitching to Wireshark.\nAnswer : WPS\nQuestion 4 # What is the packet number where the attack began?\nWe can easily deduce that it’s at the first connection attempt (the only one in the capture).\nAnswer : 93\nQuestion 5 # What is the packet number where the attack ended?\nIt’s clear that it ends when the authentication fails.\nAnswer : 8\n","date":"7 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/posts/opshieldwall-1/","section":"Posts","summary":"Scenario # Thank you for responding to our call.","title":"OpShieldWall-1","type":"posts"},{"content":" Diplomas # The images are clickable links.\nIn progress Master’s Degree (BAC+5) - Expert in Data, Network, and System Security\nOnly available through work-study programs\nhttps://www.francecompetences.fr/recherche/rncp/38951/ Bachelor’s Degree (BAC+3) - Cybersecurity \u0026 Ethical Hacking\n3rd year in work-study program\nWith Highest Honour Bachelor’s Degree (BAC+3) - Network and Systems Architect\nWith Highest Honour List of all the challenges, labs, boxes, etc., that I have completed, as well as conferences and trainings I have attended:\nHackTheBox # Iron = Insane Red = Hard Orange = Medium Green = Easy Purple = Very Easy Some images do not link to the HTB result pages as they are boxes/Sherlocks only available on the HackTheBox Enterprise platform (which does not allow for shareable links).\nSherlock # DFIR / SOC # OpShieldWall-7 Heartbreaker Trent APTNightmare OpShieldWall-4 OpShieldWall-2 OpShieldWall-1 Jingle Bell Recollection Noted Tracer Log Jammer Rogue One CrownJewel-2 CrownJewel-1 Brutus Malware Analysis # OpShieldWall-6 Loggy Heartbreaker Cloud # Nubilum-2 Box # Linux # OpShieldWall-5 OpShieldWall-3 Blurry Runner IClean Perfection BoardLight Headless Wifinetic MetaTwo Lame Nibbles Precious Windows # Jerry Netmon Blue HackTheBox Academy # Transcript.pdf\nRootMe # Cyberdefenders # Threat Hunting # Hard Network Forensics # Hard Medium Medium Medium Medium Medium Easy Easy Easy Easy Easy Easy Easy Easy Endpoint Forensics # Medium Easy Threat Intel # Medium Medium Easy Easy Easy Easy Cloud Forensics # Easy TryHackMe # 92 rooms completed\nPath :\nPre Security Complete Beginner Web Fundamentals Comptia Pentest+ Cours # OALABS : Reverse Engineering 101 (RE101) Evasive Malware : A Field Guide to Detecting, Analyzing, and Defeating Advanced Threats (Kyle Cucci - no starch press) Kaspersky : Advanced Malware Analysis Techniques Kaspersky : Hunting APTs like a Ninja with YARA 13Cubed : Investigating Windows Endpoint 13Cubed : Investigating Windows Memory Roman Stuehler : Android App Hacking - Black Belt Edition Pentherz : Intro to SDR Hacking Christopher Negus : Linux Bible OSINT (Open Source Intelligence Techniques) : IntelTechniques Opdisk : The Cyber Plumber\u0026rsquo;s Handbook Conf \u0026amp; meetups # 2024 # DEFCON Paris Meetups HTB France 2023 # Hexacon DEFCON Paris LeHack HTB Meetups France ","date":"6 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/posts/portfolio/","section":"Posts","summary":"Diplomas # The images are clickable links.","title":"Portfolio","type":"posts"},{"content":" Self-Hosted Infrastructure # Juin 2023 - maintenant\nProfessional Server (HP ProLiant DL380 Gen9 2U) running Proxmox Firewall running OPNsense Self-hosted services and tools: VPN, Security Onion, Wazuh, Cuckoo Sandbox, GitLab, CTF machines, various labs (red team / blue team) A special Malware Analysis lab \u0026amp; OSINT lab with security, privacy and OPSEC in mind Architecture, network segmentation, IPS/IDS integration, load balancing, SRE, VPN CTF Challenge Creator # Juin 2024 - Juin 2024\nCreation of two radio challenges (misc easy and medium) for the \u0026ldquo;PwnMe CTF 2024\u0026rdquo;.\nhttps://ctftime.org/ctf/807/\nhttps://www.phreaks2600.fr/\nSide Quest - Toolkit Network Forensic \u0026amp; Malware Analysis # Févr. 2024 - Juin 2024\nOur Side Quest is a collaborative student project designed to provide a powerful toolkit for network forensic analysis and malware analysis. This repository contains two sub-projects that focus on different aspects of investigation:\nNetwork Forensic Analysis: Tools for analyzing network traffic captured in PCAP files. Malware Analysis: Tools for dissecting binary files to uncover hidden information and detect malicious characteristics. https://github.com/jaybird1291/toolkit-network-forensic-malware-analysis-sidequest\n","date":"5 May 2024","externalUrl":null,"permalink":"/blog-cyber/en/posts/projets/","section":"Posts","summary":"Self-Hosted Infrastructure # Juin 2023 - maintenant","title":"Projets","type":"posts"},{"content":"","externalUrl":null,"permalink":"/blog-cyber/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/blog-cyber/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/blog-cyber/en/series/","section":"Series","summary":"","title":"Series","type":"series"}]